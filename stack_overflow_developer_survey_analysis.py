# -*- coding: utf-8 -*-
"""EDA-6_Stack Overflow Developer Survey Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LPaIgCZJ6V5NNa8eB2N5qCltA4GK6jXp
"""

!pip install opendatasets --upgrade --quiet

import opendatasets as od
od.download('stackoverflow-developer-survey-2020')

import os

os.listdir('stackoverflow-developer-survey-2020')

import pandas as pd
survey_raw_df = pd.read_csv('stackoverflow-developer-survey-2020/survey_results_public.csv')

survey_raw_df

survey_raw_df.columns

schema_fname = 'stackoverflow-developer-survey-2020/survey_results_schema.csv'
schema_raw = pd.read_csv(schema_fname, index_col='Column').QuestionText

schema_raw

type (schema_raw)

schema_raw['YearsCodePro']

"""##Data load completed

##Data Preperation & Cleaning
"""

selected_columns = [
    #Demographics
    'Country',
    'Age',
    'Gender',
    'EdLevel',
    'UndergradMajor',
    #Programming experience
    'Hobbyist',
    'Age1stCode', # Corrected column name
    'YearsCode',
    'YearsCodePro',
    'LanguageWorkedWith',
    'LanguageDesireNextYear',
    'NEWLearn',
    'NEWStuck',
    #Employment
    'Employment',
    'DevType',
    'WorkWeekHrs',
    'JobSat',
    'JobFactors',
    'NEWOvertime',
    'NEWEdImpt', # Corrected column name
    'ConvertedComp' # Include ConvertedComp
]

len(selected_columns)

survey_df = survey_raw_df[selected_columns].copy()

schema = schema_raw[selected_columns]

survey_df.shape

survey_df.info()

survey_df.Age1stCode.unique()

survey_df['Age1stCode'] = pd.to_numeric(survey_df.Age1stCode, errors='coerce')
survey_df['YearsCode'] = pd.to_numeric(survey_df.Age1stCode, errors='coerce')
survey_df['YearsCodePro'] = pd.to_numeric(survey_df.Age1stCode, errors='coerce')

survey_df.describe()

survey_df.drop(survey_df[survey_df.Age < 10].index, inplace=True)
survey_df.drop(survey_df[survey_df.Age > 100].index, inplace=True)

survey_df.drop(survey_df[survey_df.WorkWeekHrs>140].index, inplace=True)

survey_df['Gender'].value_counts()

import numpy as np

"""#Explanation of the code:

* **`survey_df.where(~(survey_df.Gender.str.contains(',', na=False)), np.nan, inplace=True)`:**
    * This is the core cleaning step.
    * It checks if each 'Gender' entry contains a comma (`,`), which indicates multiple selections.
    * `~` (tilde) inverts this check: so it becomes `True` for single selections and `False` for multiple selections.
    * The `where()` method then replaces 'Gender' values with `np.nan` (missing) wherever the condition is `False` (i.e., for multiple selections).
    * `inplace=True` applies these changes directly to `survey_df`.
    * **Result:** All 'Gender' entries with multiple selections are changed to `NaN`, simplifying future analysis.
"""

survey_df.where(~(survey_df.Gender.str.contains(',', na=False)), np.nan, inplace=True)

survey_df.sample(10)

"""#Exploratory Analysis and Visualization"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (9, 5)
matplotlib.rcParams['figure.facecolor'] = '#00000000'

"""### Country"""

schema.Country

survey_df.Country.nunique()

top_countries = survey_df.Country.value_counts().head(15)
top_countries

"""We can visualize this information using a bar chart."""

plt.figure(figsize=(12,6))
plt.xticks(rotation=90)
plt.title(schema.Country)
sns.barplot(x=top_countries.index, y=top_countries, palette='Set1')
plt.show()

"""### Age"""

plt.figure(figsize=(12,6))
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Number of respondents')

plt.hist(survey_df.Age, bins=np.arange(10, 80, 5), color='midnightblue')
plt.show()

import plotly.express as px

px.histogram(survey_df, x="Age", marginal="box", title='Age of Respondents')

"""### Gender"""

schema.Gender

gender_counts = survey_df.Gender.value_counts()
gender_counts

plt.figure(figsize=(12,6))
plt.title(schema.Gender)
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=180);

"""autopct='%1.1f%%'

This formats the percentage displayed on each slice. It shows the percentage with one decimal place, followed by a percent sign (e.g., "55.3%").

### Education Level
"""

survey_df.EdLevel

schema.EdLevel

sns.countplot(y=survey_df.EdLevel, palette='Set2')
plt.xticks(rotation=70)
plt.title(schema['EdLevel'])
plt.ylabel(None)
plt.show();

schema.UndergradMajor

Undergrad_pct = survey_df.UndergradMajor.value_counts()*100/ survey_df.UndergradMajor.count()

sns.barplot(x=Undergrad_pct, y=Undergrad_pct.index, orient='h', palette='Set2')
plt.xlabel('Percentage')
plt.ylabel(None)
plt.title(schema.UndergradMajor)

"""### Employment"""

schema.Employment

survey_df.Employment.value_counts()

(survey_df.Employment.value_counts(normalize=True, ascending=True)*100).plot(kind='barh', color='darkblue', title=schema.Employment)

plt.title(schema.Employment)
plt.ylabel(None)
plt.xlabel('Percentage')
plt.show()

"""for everyones job title"""

schema.DevType

survey_df.DevType.value_counts()

"""Let's define a helper function that turns a column containing lists of values (like `survey_df.DevType`) into a data frame with one column for each possible option."""

def split_multicolumn(col_series):
  result_df = col_series.to_frame()
  options = []
  for idx, value in col_series[col_series.notnull()].items():
    for option in value.split(';'):
      # Check if the option is already in the list
      if not option in result_df.columns:
        # If not, add it to the list
        options.append(option)
        # Create a new column for this option and
        result_df[option] = False
      # Set the value in the new column for the current row
      result_df.at[idx, option] = True
  return result_df[options]

dev_type_df = split_multicolumn(survey_df.DevType)

dev_type_df

"""###now we have to take column wise sum to know number of job profiles"""

dev_type_totals = dev_type_df.sum().sort_values(ascending=False)
dev_type_totals

"""if i want to know number of Data scientist in from dev_type_totals using pandas"""

# prompt: if i want to know number of Data scientist in from dev_type_totals using pandas

data_scientist_count = dev_type_totals['Data scientist or machine learning specialist']
data_scientist_count

"""###Compensation vs. Working Hours"""

survey_df.columns

usa_df = survey_df[survey_df.Country.isin(['United States','India'])]
px.scatter(usa_df, x='WorkWeekHrs', color='Country')

px.histogram(survey_df, x="WorkWeekHrs", title='Hours of Work Per Week', nbins=40)

"""## Asking and Answering Questions

#### Q: What are the most popular programming languages in 2020?
"""

survey_df.LanguageWorkedWith

survey_df.LanguageDesireNextYear

"""we'll split this column into a data frame containing a column of each language listed in the options."""

languages_worked_df = split_multicolumn(survey_df.LanguageWorkedWith)
languages_worked_df

languages_worked_percentages = languages_worked_df.mean().sort_values(ascending=False)*100
languages_worked_percentages

from typing import Any
plt.figure(figsize=(12,8))
sns.barplot(x=languages_worked_percentages, y=languages_worked_percentages.index,  palette='coolwarm')
plt.title("Languages used in the past year")
plt.xlabel('count')

"""#### Q: Which languages are the most people interested to learn over the next year?"""

languages_interested_df = split_multicolumn(survey_df.LanguageDesireNextYear)
languages_interested_percentages = languages_interested_df.mean().sort_values(ascending=False)*100
languages_interested_percentages

plt.figure(figsize=(12,8))
sns.barplot(x=languages_interested_percentages, y=languages_interested_percentages.index,  palette='coolwarm')
plt.title("Languages people are interested to learn")
plt.xlabel('count');

"""#### Q:  Which are the most loved languages, i.e., a high percentage of people who have used the language want to continue learning & using it over the next year?

"""

languages_loved_df = languages_worked_df & languages_interested_percentages
languages_loved_df

languages_loved_percentages  = (languages_loved_df.sum() * 100 / languages_worked_percentages.sum()).sort_values(ascending=False)
languages_loved_percentages

plt.figure(figsize=(12,8))
sns.barplot(x=languages_loved_percentages, y=languages_loved_percentages.index,  palette='coolwarm')
plt.title("Languages Most loved by developers")
plt.xlabel('count');

"""#### Q: In which countries do developers work the highest number of hours per week? Consider countries with more than 250 responses only."""

countries_df = survey_df.groupby('Country')[['WorkWeekHrs']].mean().sort_values(by='WorkWeekHrs', ascending=False)

high_response_countries_df = countries_df.loc[survey_df.Country.value_counts()>250].head(15)

high_response_countries_df

# prompt: plot countries in  y axis also use color palette

plt.figure(figsize=(5,5))
sns.barplot(y=high_response_countries_df.index, x=high_response_countries_df.WorkWeekHrs, palette='viridis')
plt.title('Average weekly work hours by country')
plt.xlabel('WorkWeekHrs')
plt.ylabel('Country')
plt.show()

"""#### Q: How important is it to start young to build a career in programming?

"""

schema.YearsCodePro

sns.scatterplot(x='Age', y='YearsCodePro', hue='Hobbyist', data=survey_df, palette='dark')
plt.xlabel("Age")
plt.ylabel("Years of coding experience")
plt.title("Age vs. Years of coding experience")
plt.show()

plt.title(schema.Age1stCode)
sns.distplot(survey_df.Age1stCode, color='midnightblue');
#bins=(10),

"""The seaborn.distplot function was a common tool in the Seaborn library for visualizing the distribution of a univariate dataset. It combined a histogram with a Kernel Density Estimate (KDE) plot and, optionally, a rug plot."""